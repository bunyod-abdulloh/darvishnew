from aiogram import Router, F, types

from bot.keyboards.inline.testskb import leotest_ikb, start_test
from bot.keyboards.reply.tests_dkb import tests_main_dkb
from loader import db

router = Router()


async def leo_result(call: types.CallbackQuery):
    telegram_id = call.from_user.id

    isteroid_all = None
    pedantic_all = None
    rigid_all = None
    epileptoid_all = None
    gipertim_all = None
    distimic_all = None
    dangerous_all = None
    ciclomistic_all = None
    emotiv_all = None
    affectexaltir_all = None

    isteroid = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="isteroid"
    )
    if isteroid:
        isteroid_all = (isteroid['total_yes'] + isteroid['total_no']) * 2

    pedantic = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="pedantic"
    )
    if pedantic:
        pedantic_all = (pedantic['total_yes'] + pedantic['total_no']) * 2

    rigid = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="rigid"
    )
    if rigid:
        rigid_all = (rigid['total_yes'] + rigid['total_no']) * 2

    epileptoid = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="epileptoid"
    )
    if epileptoid:
        epileptoid_all = (epileptoid['total_yes'] + epileptoid['total_no']) * 3

    gipertim = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="gipertim"
    )
    if gipertim:
        gipertim_all = (gipertim['total_yes'] + gipertim['total_no']) * 3

    distimic = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="distimic"
    )
    if distimic:
        distimic_all = (distimic['total_yes'] + distimic['total_no']) * 3

    dangerous = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="danger"
    )
    if dangerous:
        dangerous_all = (dangerous['total_yes'] + dangerous['total_no']) * 3

    ciclomistic = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="ciclomistic"
    )
    if ciclomistic:
        ciclomistic_all = (ciclomistic['total_yes'] + ciclomistic['total_no']) * 3

    affectexaltir = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="affectexaltir"
    )
    if affectexaltir:
        affectexaltir_all = (affectexaltir['total_yes'] + affectexaltir['total_no']) * 6

    emotiv = await db.get_sums_leotemp(
        telegram_id=telegram_id, scale_type="emotiv"
    )
    if emotiv:
        emotiv_all = (emotiv['total_yes'] + emotiv['total_no']) * 3
    user = await db.select_user(
        telegram_id=telegram_id
    )
    await call.message.edit_text(
        text=f"–°—û—Ä–æ–≤–Ω–æ–º–∞ —è–∫—É–Ω–ª–∞–Ω–¥–∏!\n\n"
             f"–¢–µ—Å—Ç —Ç—É—Ä–∏: –õ–µ–æ–Ω–≥–∞—Ä–¥ | –•–∞—Ä–∞–∫—Ç–µ—Ä–æ–ª–æ–≥–∏–∫ —Å—û—Ä–æ–≤–Ω–æ–º–∞"
             f"–§.–ò.–û: {user['fio']}\n\n"
             f"–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º: {user['phone']}\n\n"
             f"1. –ù–∞–º–æ–π–∏—à–∫–æ—Ä(–∏—Å—Ç–µ—Ä–æ–∏–¥) —Ç–æ–∏—Ñ–∞: {isteroid_all} –±–∞–ª–ª\n"
             f"2. –ü–µ–¥–∞–Ω—Ç–∏–∫ —Ç–æ–∏—Ñ–∞: {pedantic_all} –±–∞–ª–ª\n"
             f"3. –ë–∏—Ä –∂–æ–π–¥–∞ “õ–æ—Ç–∏–± “õ–æ–ª–≥–∞–Ω(—Ä–∏–≥–∏–¥) —Ç–æ–∏—Ñ–∞: {rigid_all} –±–∞–ª–ª\n"
             f"4. –¢–µ–∑ “õ—û–∑“ì–∞–ª—É–≤—á–∞–Ω(—ç–ø–∏–ª–µ–ø—Ç–æ–∏–¥) —Ç–æ–∏—Ñ–∞: {epileptoid_all} –±–∞–ª–ª\n"
             f"5. –ì–∏–ø–µ—Ä—Ç–∏–º —Ç–æ–∏—Ñ–∞: {gipertim_all} –±–∞–ª–ª\n"
             f"6. –î–∏—Å—Ç–∏–º–∏–∫ —Ç–æ–∏—Ñ–∞: {distimic_all} –±–∞–ª–ª\n"
             f"7. –•–∞–≤–æ—Ç–∏—Ä–ª–∏ –≤–∞ “õ—û—Ä“õ—É–≤—á–∏ —Ç–æ–∏—Ñ–∞: {dangerous_all} –±–∞–ª–ª\n"
             f"8. –¶–∏–∫–ª–æ—Ç–∏–º —Ç–æ–∏—Ñ–∞: {ciclomistic_all} –±–∞–ª–ª\n"
             f"9. –ê—Ñ—Ñ–µ–∫—Ç–∏–≤ - —ç–∫–∑–∞–ª—å—Ç–∏—Ä —Ç–æ–∏—Ñ–∞: {affectexaltir_all} –±–∞–ª–ª\n"
             f"10. –≠–º–æ—Ç–∏–≤ —Ç–æ–∏—Ñ–∞: {emotiv_all} –±–∞–ª–ª\n\n"
             f"–°—û—Ä–æ–≤–Ω–æ–º–∞ –≤–∞ —à–∫–∞–ª–∞–ª–∞—Ä–≥–∞ —Ç–∞—ä—Ä–∏—Ñ “õ—É–π–∏–¥–∞–≥–∏ “≥–∞–≤–æ–ª–∞–¥–∞:\n\n"
             f"https://telegra.ph/K-Leongardning-harakterologik-s%D1%9Erovnomasi-07-25"
    )
    await db.delete_leotemp(
        telegram_id=telegram_id
    )


@router.message(F.text == "Leongard so'rovnomasi")
async def leo_main_router(message: types.Message):
    await db.delete_leotemp(
        telegram_id=message.from_user.id
    )
    await message.answer(
        text="–£—à–±—É —Ç–µ—Å—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏–Ω–≥ –∞–∫—Ü–µ–Ω—Ç—É–∞—Ü–∏—è—Å–∏–Ω–∏ —û—Ä–≥–∞–Ω—É–≤—á–∏ –°—û—Ä–æ–≤–Ω–æ–º–∞ –±—û–ª–∏–±, —û–∑ –∏—á–∏–≥–∞ 88 —Ç–∞ —Å–∞–≤–æ–ª, 10 —Ç–∞ —à–∫–∞–ª–∞–Ω–∏ "
             "–æ–ª–∞–¥–∏. –ë–∏—Ä–∏–Ω—á–∏ —à–∫–∞–ª–∞ —à–∞—Ö—Å–Ω–∏ —Ö–∞—ë—Ç–∏–π —Ñ–∞–æ–ª–ª–∏–≥–∏–Ω–∏ —û—Ä–≥–∞–Ω—É–≤—á–∏, –∏–∫–∫–∏–Ω—á–∏ —à–∫–∞–ª–∞ —ç—Å–∞ –∞–∫—Ü–µ–Ω—Ç—É–∞—Ü–∏—è–Ω–∏ —Ç–∞—ä—Å–∏—Ä–ª–∞–Ω–∏—à–∏–Ω–∏ "
             "–Ω–∞–º–æ–π–∏—à —ç—Ç–∞–¥–∏. –£—á–∏–Ω—á–∏ —à–∫–∞–ª–∞ —Å–∏–Ω–∞–ª—É–≤—á–∏–Ω–∏–Ω–≥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª —Ö–∞—ë—Ç–∏–Ω–∏–Ω–≥ —á—É“õ—É—Ä–ª–∏–≥–∏–Ω–∏ —Ö–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏. –¢—û—Ä—Ç–∏–Ω—á–∏ —à–∫–∞–ª–∞ "
             "—ç—Å–∞ —Å–∏–Ω–∞–ª—É–≤—á–∏–Ω–∏–Ω–≥ –ø–µ–¥–∞–Ω—Ç–∏–∑–º–≥–∞ –±—û–ª–≥–∞–Ω –º–æ–π–∏–ª–ª–∏–≥–∏–Ω–∏ —û—Ä–≥–∞–Ω—É–≤—á–∏ —Ö–∏—Å–æ–±–ª–∞–Ω–∞–¥–∏.  –ë–µ—à–∏–Ω—á–∏ —à–∫–∞–ª–∞ —é“õ–æ—Ä–∏ "
             "—Ö–∞–≤–æ—Ç–∏—Ä–ª–∏–∫–Ω–∏, –æ–ª—Ç–∏–Ω—á–∏ —à–∫–∞–ª–∞ —ç—Å–∞ –∫–∞–π—Ñ–∏—è—Ç–Ω–∏–Ω–≥ —Å–∞–±–∞–±—Å–∏–∑ –∫—û—Ç–∞—Ä–∏–ª–∏–± —ë–∫–∏ –∞–∫—Å–∏–Ω—á–∞ —Ç—É—à–∏—à–≥–∞ –±—û–ª–≥–∞–Ω –º–æ–π–∏–ª–ª–∏–≥–∏–Ω–∏, "
             "–µ—Ç—Ç–∏–Ω—á–∏ —à–∫–∞–ª–∞ –±—û–ª—Å–∞ —à–∞—Ö—Å–Ω–∏–Ω–≥ –Ω–∞–º–æ–π–∏—à–∫–æ—Ä–æ–Ω–∞ —Ö—É–ª“õ-–∞—Ç–≤–æ—Ä–∏–Ω–∏,  —Å–∞–∫–∫–∏–∑–∏–Ω—á–∏ —à–∫–∞–ª–∞—Å–∏ —ç—Å–∞ —Ç—É—Ä“ì—É–Ω —Ç—É—Ä–º–∞–π–¥–∏–≥–∞–Ω "
             "—Ñ–µ—ä–ª –∞—Ç–≤–æ—Ä,  —Ç—û“õ“õ–∏–∑–∏–Ω—á–∏ —à–∫–∞–ª–∞ —á–∞—Ä—á–æ“õ–ª–∏–∫ –¥–∞—Ä–∞–∂–∞—Å–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à, —û–Ω–∏–Ω—á–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª —Ä–µ–∞–∫—Ü–∏—è—Å–∏–Ω–∏–Ω–≥ –∫—É—á–∏ –≤–∞ –∏—Ñ–æ–¥–∞ "
             "–¥–∞—Ä–∞–∂–∞—Å–∏–Ω–∏ –∞–Ω–∏“õ–ª–∞—à–≥–∞ “õ–∞—Ä–∞—Ç–∏–ª–≥–∞–Ω.\n–¢–µ—Å—Ç —Å–∞–≤–æ–ª–ª–∞—Ä–∏–Ω–∏ –µ—á–∏—à–≥–∞ –≤–∞“õ—Ç —á–µ–≥–∞—Ä–∞–ª–∞–Ω–º–∞–≥–∞–Ω.  –ë–∏–∑ –°–∏–∑ —É—á—É–Ω, –°–∏–∑–Ω–∏ "
             "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–Ω–≥–∏–∑–≥–∞ —Ç–µ–≥–∏—à–ª–∏ –±—û–ª–≥–∞–Ω —Ç–∞—Å–¥–∏“õ —Å–∞–≤–æ–ª–ª–∞—Ä–Ω–∏ —Ö–∞–≤–æ–ª–∞ —ç—Ç–∞–º–∏–∑. –ê–≥–∞—Ä –°–∏–∑ —Ç–∞—Å–¥–∏“õ —Å–∞–≤–æ–ª–ª–∞—Ä–≥–∞ —Ä–æ–∑–∏–ª–∏–∫ "
             "–±–µ—Ä—Å–∞–Ω–≥–∏–∑ ¬´“≤–∞¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏, —Ä–æ–∑–∏–ª–∏–∫ –±–∏–ª–¥–∏—Ä–º–∞—Å–∞–Ω–≥–∏–∑ ¬´–ô—û“õ¬ª —Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å–∏–Ω–≥. –°–∞–≤–æ–ª–ª–∞—Ä —É—Å—Ç–∏–¥–∞ –∫—û–ø —û–π–ª–∞–Ω–º–∞–Ω–≥ "
             "—á—É–Ω–∫–∏ —Ç—û“ì—Ä–∏ —ë–∫–∏ –Ω–æ—Ç—û“ì—Ä–∏ –∂–∞–≤–æ–±–ª–∞—Ä –º–∞–≤–∂—É–¥ —ç–º–∞—Å.",
        reply_markup=start_test(callback="leoxarakter")
    )


@router.callback_query(F.data == "leoxarakter")
async def leo_second_router(call: types.CallbackQuery):
    all_questions = await db.select_questions_leo()
    await call.message.edit_text(
        text=f"{all_questions[0]['question_number']} / {len(all_questions)}\n\n{all_questions[0]['question']}",
        reply_markup=leotest_ikb(all_questions[0])
    )


@router.callback_query(F.data.startswith("leoyes:"))
async def leoyes_callback(call: types.CallbackQuery):
    question_id = int(call.data.split(":")[1])
    telegram_id = call.from_user.id
    all_questions = await db.select_questions_leo()
    await call.answer(
        cache_time=0
    )

    get_yes = await db.get_yes_leoscales(
        yes=question_id
    )
    if get_yes:
        get_question = await db.select_check_leotemp(
            telegram_id=telegram_id, question_number=question_id
        )
        if get_question is None:
            await db.add_leotempyes(
                telegram_id=telegram_id, scale_type=get_yes['scale_type'], question_number=question_id, yes=1
            )
    if question_id == 88:
        await leo_result(
            call=call
        )
    else:
        await call.message.edit_text(
            text=f"{all_questions[question_id]['question_number']} / {len(all_questions)}"
                 f"\n\n{all_questions[question_id]['question']}",
            reply_markup=leotest_ikb(all_questions[question_id])
        )


@router.callback_query(F.data.startswith("leono:"))
async def leono_callback(call: types.CallbackQuery):
    question_id = int(call.data.split(":")[1])
    telegram_id = call.from_user.id
    all_questions = await db.select_questions_leo()
    await call.answer(
        cache_time=0
    )

    get_no = await db.get_no_leoscales(
        no_=question_id
    )
    if get_no:
        get_question = await db.select_check_leotemp(
            telegram_id=telegram_id, question_number=question_id
        )
        if get_question is None:
            await db.add_leotempno(
                telegram_id=telegram_id, scale_type=get_no['scale_type'], question_number=question_id, no_=1
            )
    if question_id == 88:
        await leo_result(
            call=call
        )
    else:
        await call.message.edit_text(
            text=f"{all_questions[question_id]['question_number']} / {len(all_questions)}"
                 f"\n\n{all_questions[question_id]['question']}",
            reply_markup=leotest_ikb(all_questions[question_id])
        )


@router.callback_query(F.data.startswith("leoback"))
async def leoback_callback(call: types.CallbackQuery):
    question_id = int(call.data.split(":")[1])
    telegram_id = call.from_user.id

    if question_id == 0:
        await call.message.delete()
        await call.message.answer(
            text="üßë‚Äçüíª Testlar | So'rovnomalar", reply_markup=tests_main_dkb
        )
    else:
        await db.back_leotemp(
            telegram_id=telegram_id, question_number=question_id
        )

        all_questions = await db.select_questions_leo()

        await call.message.edit_text(
            text=f"{all_questions[question_id - 1]['question_number']} / {len(all_questions)}"
                 f"\n\n{all_questions[question_id - 1]['question']}",
            reply_markup=leotest_ikb(
                testdb=all_questions[question_id - 1]
            )
        )
